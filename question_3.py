# -*- coding: utf-8 -*-
"""Question_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FJI_LMXutk1LxUUoViKeH-dyLlh8j9yF
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import matplotlib.pyplot as plt

sports_teams = {
                  'mens_swimming': ['https://csidolphins.com/sports/mens-swimming-and-diving/roster/2023-2024?view=2', 'https://athletics.baruch.cuny.edu/sports/mens-swimming-and-diving/roster?view=2','https://www.brooklyncollegeathletics.com/sports/mens-volleyball/roster?view=2','https://johnjayathletics.com/sports/mens-volleyball/roster?view=2','https://athletics.baruch.cuny.edu/sports/mens-volleyball/roster?view=2','https://mecathletics.com/sports/mens-volleyball/roster?view=2','https://www.huntercollegeathletics.com/sports/mens-volleyball/roster?view=2','https://yorkathletics.com/sports/mens-volleyball/roster?view=2','https://ballstatesports.com/sports/mens-volleyball/roster?view=2'],
                  'mens_volleyball': ['https://ccnyathletics.com/sports/mens-volleyball/roster?view=2', 'https://lehmanathletics.com/sports/mens-volleyball/roster?view=2','https://www.brooklyncollegeathletics.com/sports/mens-volleyball/roster?view=2','https://johnjayathletics.com/sports/mens-volleyball/roster?view=2','https://athletics.baruch.cuny.edu/sports/mens-volleyball/roster?view=2','https://mecathletics.com/sports/mens-volleyball/roster?view=2','https://www.huntercollegeathletics.com/sports/mens-volleyball/roster?view=2','https://yorkathletics.com/sports/mens-volleyball/roster','https://ballstatesports.com/sports/mens-volleyball/roster?view=2',],
                  'womens_volleyball': ['https://bronxbroncos.com/sports/womens-volleyball/roster/2021?view=2','https://queensknights.com/sports/womens-volleyball/roster?view=2','https://augustajags.com/sports/wvball/roster?view=2','https://flaglerathletics.com/sports/womens-volleyball/roster?view=2','https://pacersports.com/sports/womens-volleyball/roster?view=2','https://www.golhu.com/sports/womens-volleyball/roster?view=2'],
                  'womens_swimming': ['https://yorkathletics.com/sports/womens-swimming-and-diving/roster','https://athletics.baruch.cuny.edu/sports/womens-swimming-and-diving/roster/2021-22?path=wswim','https://mckbearcats.com/sports/womens-swimming-and-diving/roster','https://ramapoathletics.com/sports/womens-swimming-and-diving/roster','https://keanathletics.com/sports/womens-swimming-and-diving/roster']
                }

def average_height(url_list):

  # list to store heights
  heights = []
  names = []

  # vist each url in the list
  for url in url_list:

    # headers Source: https://www.zenrows.com/blog/web-scraping-headers#user-agent
    headers = {
      'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36',
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
      'Accept-Language': 'en-US,en;q=0.9',
      'Connection': 'keep-alive'
      }

    # making a request to the server
    page = requests.get(url, headers=headers)

    # scrape data only if connection is successful
    if page.status_code == 200:
      # import the raw html into BeautifulSoup
      soup = BeautifulSoup(page.content, 'html.parser')

      # find all td tags with a class of height
      raw_heights = soup.find_all('td', class_ ='height')


      # find all td tags with a class of sidearm-table-player-name
      name_tags = soup.find_all('td', class_ ='sidearm-table-player-name')

      # extracting the name from the name tags
      for name_tag in name_tags:
        names.append(name_tag.get_text().strip())

      # extract the raw height from the list
      for raw_height in raw_heights:
        x = raw_height.get_text()
        # splitting the string by the '-'
        feet = float(x.split('-')[0]) * 12
        inches = float(x.split('-')[1])

        # converting height to inches
        height_inches = feet + inches

        heights.append(height_inches)


  # organized the data as a dictionary
  data = {
      'Name': names,
      'Height': heights
  }

  df = pd.DataFrame(data)
  return df

mens_swim_df = average_height(sports_teams['mens_swimming'])
mens_swim_df
# shows the mens swimming into a dataframe

mens_volley_df = average_height(sports_teams['mens_volleyball'])
mens_volley_df

womens_volley_df = average_height(sports_teams['womens_volleyball'])
womens_volley_df

womens_swimming_df = average_height(sports_teams['womens_swimming'])
womens_swimming_df

top_heights = mens_swim_df['Height'].nlargest(5).unique()
fifth_height = top_heights[-1]

# filter the dataframe to include all athletes with height >= fifth height
mens_swim_df[mens_swim_df['Height'] >= fifth_height]

top_heights = mens_volley_df['Height'].nlargest(5).unique()
fifth_height = top_heights[-1]

# filter the dataframe to include all athletes with height >= fifth height
mens_volley_df[mens_volley_df['Height'] >= fifth_height]

top_heights = womens_volley_df['Height'].nlargest(5).unique()
fifth_height = top_heights[-1]

# filter the dataframe to include all athletes with height >= fifth height
womens_volley_df[womens_volley_df['Height'] >= fifth_height]

top_heights = womens_swimming_df['Height'].nlargest(5).unique()
fifth_height = top_heights[-1]

# filter the dataframe to include all athletes with height >= fifth height
womens_swimming_df[womens_swimming_df['Height'] >= fifth_height]

shortest_heights = mens_swim_df['Height'].nsmallest(5).unique()
fifth_height = shortest_heights[-1]

# filter the dataframe to include all athletes with height >= fifth height
mens_swim_df[mens_swim_df['Height'] <= fifth_height]

shortest_heights = mens_volley_df['Height'].nsmallest(5).unique()
fifth_height = shortest_heights[-1]

# filter the dataframe to include all athletes with height >= fifth height
mens_volley_df[mens_volley_df['Height'] <= fifth_height]

shortest_heights = womens_volley_df['Height'].nsmallest(5).unique()
fifth_height = shortest_heights[-1]

# filter the dataframe to include all athletes with height >= fifth height
womens_volley_df[womens_volley_df['Height'] <= fifth_height]

shortest_heights = womens_swimming_df['Height'].nsmallest(5).unique()
fifth_height = shortest_heights[-1]

# filter the dataframe to include all athletes with height >= fifth height
womens_swimming_df[womens_swimming_df['Height'] <= fifth_height]

mens_swim_df.describe()

mens_volley_df.describe()

womens_volley_df.describe()

womens_swimming_df.describe()

mens_swim_avg = mens_swim_df['Height'].mean()
print(f'The avg height of the mens swimming team is {mens_swim_avg}')

mens_volley_avg = mens_volley_df['Height'].mean()
print(f'The avg height of the mens volleyball  team is {mens_volley_avg}')

womens_volley_avg = womens_volley_df['Height'].mean()
print(f'The avg height of the womens volley team is {womens_volley_avg}')

womens_swimming_avg = womens_swimming_df['Height'].mean()
print(f'The avg height of the womens swimming team is {womens_swimming_avg}')

avg_data = {
              'Team' : ['Mens Swim Team' , 'Mens Volleyball Team','Womens Swim Team','Womens Volleyball Team'],
              'Avg Height' : [mens_swim_avg , mens_volley_avg, womens_swimming_avg, womens_volley_avg]
          }

# convert dictionary to dataframe

avg_data_df = pd.DataFrame(avg_data)
avg_data_df



avg_data_df.plot.bar(x='Team', y = 'Avg Height', title='Avg Heights Among Athletes')
plt.show()